{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Omnigres","text":"<p>Omnigres makes PostgreSQL a complete application platform. You can deploy a single database instance and it can host your entire application, scaling as needed.</p> <ul> <li>Running application logic inside or next to the database instance</li> <li>Deployment provisioning (Git, Docker, etc.)</li> <li>Database instance serves HTTP, WebSocket and other protocols</li> <li>In-memory and volatile on-disk caching</li> <li>Routine application building blocks (authentication, authorization, payments, etc.)</li> <li>Database-modeled application logic via reactive queries</li> <li>Automagic remote APIs and form handling</li> <li>Live data updates</li> </ul>"},{"location":"#omnigres-architecture","title":"Omnigres Architecture","text":"<p>The above diagram gives a general, high-level overview of what Omnigres is composed of, how do these components fit together and what some of the upcoming components are.</p>"},{"location":"quick_start/","title":"Quick Start","text":"<p>The fastest way to try Omnigres out is by using its container image:</p> <pre><code>docker volume create omnigres\n# The environment variables (`-e`) below have these set as defaults\ndocker run --name omnigres \\\n-e POSTGRES_PASSWORD=omnigres \\\n-e POSTGRES_USER=omnigres \\\n-e POSTGRES_DB=omnigres \\\n--mount source=omnigres,target=/var/lib/postgresql/data \\\n-p 127.0.0.1:5432:5432 -p 127.0.0.1:8080:8080 --rm ghcr.io/omnigres/omnigres:latest\n# Now you can connect to it:\npsql -h localhost -p 5432 -U omnigres omnigres # password is `omnigres`\n</code></pre> <p>You can access the HTTP server at localhost:8080</p> <p>Important updates</p> <p>April 2023: Omnigres container image now includes plrust, an extension that allows developing functions in Rust!</p> Which batteries are included? <p>This image contains all Omnigres extensions (with omni_httpd and omni_web preinstalled), as well as the following languages &amp; extensions:</p> <ul> <li>adminpack</li> <li>amcheck</li> <li>autoinc</li> <li>bloom</li> <li>bool_plperl</li> <li>bool_plperlu</li> <li>btree_gin</li> <li>btree_gist</li> <li>citext</li> <li>cube</li> <li>dblink</li> <li>dict_int</li> <li>dict_xsyn</li> <li>earthdistance</li> <li>file_fdw</li> <li>fuzzystrmatch</li> <li>hstore</li> <li>hstore_plperl</li> <li>hstore_plperlu</li> <li>hstore_plpython3u</li> <li>insert_username</li> <li>intagg</li> <li>intarray</li> <li>isn</li> <li>jsonb_plperl</li> <li>jsonb_plperlu</li> <li>jsonb_plpython3u</li> <li>lo</li> <li>ltree</li> <li>ltree_plpython3u</li> <li>moddatetime</li> <li>old_snapshot</li> <li>omni_containers</li> <li>omni_ext</li> <li>omni_http</li> <li>omni_httpc</li> <li>omni_httpd</li> <li>omni_seq</li> <li>omni_sql</li> <li>omni_types</li> <li>omni_web</li> <li>pageinspect</li> <li>pg_buffercache</li> <li>pg_freespacemap</li> <li>pg_prewarm</li> <li>pg_stat_statements</li> <li>pg_surgery</li> <li>pg_trgm</li> <li>pg_visibility</li> <li>pg_walinspect</li> <li>pgcrypto</li> <li>pgrowlocks</li> <li>pgstattuple</li> <li>pljava (temporarily excluded)</li> <li>plperl</li> <li>plperlu</li> <li>plpgsql</li> <li>plpython3u</li> <li>plrust</li> <li>pltcl</li> <li>pltclu</li> <li>postgres_fdw</li> <li>refint</li> <li>seg</li> <li>sslinfo</li> <li>tablefunc</li> <li>tcn</li> <li>tsm_system_rows</li> <li>tsm_system_time</li> <li>unaccent</li> <li>uuid-ossp</li> <li>xml2</li> </ul> Why is the container image so large? <p>Unfortunately, plrust extension is responsible for many gigabytes of artifacts in the image. Typically, if you need Rust, this is not a big problem as both development machines and servers can handle this just fine.</p> <p>However, if you want a smaller image and don't need Rust, use slim flavor:</p> <pre><code>ghcr.io/omnigres/omnigres-slim:latest\n</code></pre>"},{"location":"quick_start/#building-your-own-image","title":"Building your own image","text":"<p>If you can't use the pre-built image (for example, you are running a fork or made changes), you can build the image yourself:</p> <pre><code># Build the image\nDOCKER_BUILDKIT=1 docker build . -t ghcr.io/omnigres/omnigres\n</code></pre>"},{"location":"Dynpgext/intro/","title":"Intro","text":"<p>Dynamic Postgres Extensions interface enables upgrading/downgrading Postgres extensions that allocate and use shared memory and start dynamic background workers proactively.</p>"},{"location":"Dynpgext/usage/","title":"Usage","text":"<p>To make your extension use the interface, include the header file and declare magic signature:</p> <pre><code>#include &lt;dynpgext.h&gt;\nDYNPGEXT_MAGIC;\n</code></pre>"},{"location":"Dynpgext/usage/#allocating-shared-memory","title":"Allocating shared memory","text":"<p>You can request shared memory in <code>_Dynpgext_init</code> callback you can define:</p> Shared memory allocation<pre><code>void _Dynpgext_init(const dynpgext_handle *handle) {\nhandle-&gt;allocate_shmem(handle, /* name */ \"my_ext:0.1:value\", /* size */ 1024,\n/* callback */ cb, /* callback payload */ NULL,\n/* flags */ DYNPGEXT_SCOPE_DATABASE_LOCAL /* or DYNPGEXT_SCOPE_GLOBAL */);\n}\n</code></pre> <p>A particularly useful feature is the ability to scope the allocation per database so that every database provisioned will get its own allocation of the specified size.</p> <p>Once allocated, the pointer to allocated memory can be found using <code>dynpgext_lookup_shmem(name)</code>:</p> <pre><code>void *ptr = dynpgext_lookup_shmem(\"my_ext:0.1:value\");\n</code></pre>"},{"location":"Dynpgext/usage/#registering-background-worker","title":"Registering background worker","text":"<p>You can register a background worker to be started in `_Dynpgext_init:</p> Background worker registration<pre><code>BackgroundWorker bgw = {.bgw_name = \"worker\",\n.bgw_type = \"worker\",\n.bgw_function_name = \"worker\",\n.bgw_flags = BGWORKER_SHMEM_ACCESS,\n.bgw_start_time = BgWorkerStart_RecoveryFinished};\nstrncpy(bgw.bgw_library_name, handle-&gt;library_name, BGW_MAXLEN);\nhandle-&gt;register_bgworker(handle, &amp;bgw, NULL, NULL,\nDYNPGEXT_REGISTER_BGWORKER_NOTIFY | DYNPGEXT_SCOPE_GLOBAL /* can also take DYNPGEXT_SCOPE_DATABASE_LOCAL */);\n</code></pre> <p>Just like shared memory allocations, background workers can be either global or provisioned per database.</p>"},{"location":"examples/motd/","title":"MOTD service","text":"<p>Below is a simple web application that runs inside of Postgres and manages MOTD (Message Of The Day).</p> <p>All you need to run this is just an instance of Postgres with Omnigres extensions (omni_httpd and omni_web) installed.</p> <pre><code>create table if not exists motd -- (1)\n(\nid        int primary key generated always as identity,\ncontent   text,\nposted_at timestamp default now()\n);\n-- (2)\ncreate or replace function show_motd() returns setof omni_httpd.http_outcome as\n$$\nselect\nomni_httpd.http_response('Posted at ' || posted_at || E'\\n' || content)\nfrom\nmotd\norder by\nposted_at desc\nlimit 1;\n$$ language sql;\n-- (3)\ncreate or replace function no_motd() returns setof omni_httpd.http_outcome as\n$$\nselect omni_httpd.http_response('No MOTD');\n$$\nlanguage sql;\n-- (4)\ncreate or replace function update_motd(request omni_httpd.http_request) returns omni_httpd.http_outcome as\n$$\ninsert\ninto\nmotd (content)\nvalues\n(convert_from(request.body, 'UTF8'))\nreturning omni_httpd.http_response(status =&gt; 201);\n$$\nlanguage sql;\n-- (5)\nupdate omni_httpd.handlers\nset\nquery = (select\n-- (6)\nomni_httpd.cascading_query(name, query order by priority desc nulls last)\nfrom\n(values\n('show', $$select show_motd() from request where request.method = 'GET'$$, 1),\n('update', $$select update_motd(request.*) from request where request.method = 'POST'$$, 1),\n('fallback', $$select no_motd() from request where request.method = 'GET'$$,\n0)) handlers(name, query, priority));\n</code></pre> <ol> <li>We'll store MOTD here</li> <li>Handles GET request</li> <li>Handles GET request when there is no MOTD</li> <li>Handles POST request</li> <li>Here we update an existing listener's handler. This listener is provisioned    by omni_httpd by default.</li> <li>Cascading queries allow combining multiple handlers into one</li> </ol> <p>It works like this:</p> <pre><code>GET / # =&gt; HTTP/1.1 200 OK\nNo MOTD\n\nPOST / \"Check out Omnigres\" # =&gt; HTTP/1.1 201 OK\nGET / # =&gt; HTTP/1.1 200 OK\nPosted at 2023-03-23 02:59:14.679113\nCheck out Omnigres\n</code></pre>"},{"location":"omni_containers/intro/","title":"Intro","text":"<p>Manages containers that can be automatically connected to the database instance and their lifecycle can be managed from within the database.</p>"},{"location":"omni_ext/intro/","title":"Intro","text":"<p>Omni Extension is a tool for managing Postgres extensions.</p> <ul> <li>Implements Dynpgext interface or restart-free extension installation &amp; upgrades</li> <li>End-to-end SQL interface for extension provisioning</li> <li>Extension dependency resolution</li> </ul>"},{"location":"omni_httpc/reference/","title":"HTTP client","text":"<p>omni_httpc provides an efficient HTTP/1, HTTP/2 and HTTP/3 (experimental) client functionality.</p>"},{"location":"omni_httpc/reference/#standard-mode","title":"Standard mode","text":"<p>The basic mode for <code>omni_httpc</code> use is through the use of functions provided by the extension.</p>"},{"location":"omni_httpc/reference/#preparing-a-request","title":"Preparing a request","text":"<p>In order to prepare a request, one can use <code>omni_httpc.http_request()</code> function, with the following parameters:</p> Parameter Type Description Default url text URL None 1 method omni_http.http_method HTTP method 2 <code>GET</code> headers omni_http.http_headers An array of HTTP headers None body bytea Request body <code>NULL</code> <p>The function returns a prepared request. No request is executed at this point.</p> <p>Null values in headers</p> <p>If header name is <code>null</code>, it won't create any header. If header value is  <code>null</code>, it'll be serialized as an empty string.</p>"},{"location":"omni_httpc/reference/#executing-requests","title":"Executing requests","text":"<p>Requests can be executed using <code>omni_httpc.http_execute</code> functions which takes a variadic array of requests (which means you can execute more than one request at a time):</p> <pre><code>select version &gt;&gt; 8 as http_version, status, headers,\nconvert_from(body, 'utf-8') from omni_httpc.http_execute(\nomni_httpc.http_request('https://example.com'), omni_httpc.http_request('https://example.org'))\n</code></pre> <p>Produces</p> <pre><code>-[ RECORD 1 ]+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nhttp_version | 1\nstatus       | 200\nheaders      | {\"(age,500113)\",\"(cache-control,max-age=604800)\",\"(content-type,\\\"text/html; charset=UTF-8\\\")\",\"(date,\\\"Mon, 29 May 2023 23:45:47 GMT\\\")\",\"(etag,\\\"\\\"\\\"3147526947+ident\\\"\\\"\\\")\",\"(expires,\\\"Mon, 05 Jun 2023 23:45:47 GMT\\\")\",\"(last-modified,\\\"Thu, 17 Oct 2019 07:18:26 GMT\\\")\",\"(server,\\\"ECS (sec/96ED)\\\")\",\"(vary,Accept-Encoding)\",\"(x-cache,HIT)\",\"(content-length,1256)\"}\nconvert_from | &lt;!doctype html&gt;                                                                                                                                                                                                                                                                                                                                                                  +\n             | &lt;html&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             | &lt;head&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             |     &lt;title&gt;Example Domain&lt;/title&gt;                                                                                                                                                                                                                                                                                                                                                +\n             |                                                                                                                                                                                                                                                                                                                                                                                  +\n             |     &lt;meta charset=\"utf-8\" /&gt;                                                                                                                                                                                                                                                                                                                                                     +\n             |     &lt;meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /&gt;                                                                                                                                                                                                                                                                                                        +\n             |     &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;                                                                                                                                                                                                                                                                                                       +\n             |     &lt;style type=\"text/css\"&gt;                                                                                                                                                                                                                                                                                                                                                      +\n             |     body {                                                                                                                                                                                                                                                                                                                                                                       +\n             |         background-color: #f0f0f2;                                                                                                                                                                                                                                                                                                                                               +\n             |         margin: 0;                                                                                                                                                                                                                                                                                                                                                               +\n             |         padding: 0;                                                                                                                                                                                                                                                                                                                                                              +\n             |         font-family: -apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;                                                                                                                                                                                                                                      +\n             |                                                                                                                                                                                                                                                                                                                                                                                  +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     div {                                                                                                                                                                                                                                                                                                                                                                        +\n             |         width: 600px;                                                                                                                                                                                                                                                                                                                                                            +\n             |         margin: 5em auto;                                                                                                                                                                                                                                                                                                                                                        +\n             |         padding: 2em;                                                                                                                                                                                                                                                                                                                                                            +\n             |         background-color: #fdfdff;                                                                                                                                                                                                                                                                                                                                               +\n             |         border-radius: 0.5em;                                                                                                                                                                                                                                                                                                                                                    +\n             |         box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);                                                                                                                                                                                                                                                                                                                            +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     a:link, a:visited {                                                                                                                                                                                                                                                                                                                                                          +\n             |         color: #38488f;                                                                                                                                                                                                                                                                                                                                                          +\n             |         text-decoration: none;                                                                                                                                                                                                                                                                                                                                                   +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     @media (max-width: 700px) {                                                                                                                                                                                                                                                                                                                                                  +\n             |         div {                                                                                                                                                                                                                                                                                                                                                                    +\n             |             margin: 0 auto;                                                                                                                                                                                                                                                                                                                                                      +\n             |             width: auto;                                                                                                                                                                                                                                                                                                                                                         +\n             |         }                                                                                                                                                                                                                                                                                                                                                                        +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     &lt;/style&gt;                                                                                                                                                                                                                                                                                                                                                                     +\n             | &lt;/head&gt;                                                                                                                                                                                                                                                                                                                                                                          +\n             |                                                                                                                                                                                                                                                                                                                                                                                  +\n             | &lt;body&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             | &lt;div&gt;                                                                                                                                                                                                                                                                                                                                                                            +\n             |     &lt;h1&gt;Example Domain&lt;/h1&gt;                                                                                                                                                                                                                                                                                                                                                      +\n             |     &lt;p&gt;This domain is for use in illustrative examples in documents. You may use this                                                                                                                                                                                                                                                                                            +\n             |     domain in literature without prior coordination or asking for permission.&lt;/p&gt;                                                                                                                                                                                                                                                                                                +\n             |     &lt;p&gt;&lt;a href=\"https://www.iana.org/domains/example\"&gt;More information...&lt;/a&gt;&lt;/p&gt;                                                                                                                                                                                                                                                                                                +\n             | &lt;/div&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             | &lt;/body&gt;                                                                                                                                                                                                                                                                                                                                                                          +\n             | &lt;/html&gt;                                                                                                                                                                                                                                                                                                                                                                          +\n             | \n-[ RECORD 2 ]+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nhttp_version | 1\nstatus       | 200\nheaders      | {\"(age,21859)\",\"(cache-control,max-age=604800)\",\"(content-type,\\\"text/html; charset=UTF-8\\\")\",\"(date,\\\"Mon, 29 May 2023 23:45:47 GMT\\\")\",\"(etag,\\\"\\\"\\\"3147526947+ident\\\"\\\"\\\")\",\"(expires,\\\"Mon, 05 Jun 2023 23:45:47 GMT\\\")\",\"(last-modified,\\\"Thu, 17 Oct 2019 07:18:26 GMT\\\")\",\"(server,\\\"ECS (sec/96EE)\\\")\",\"(vary,Accept-Encoding)\",\"(x-cache,HIT)\",\"(content-length,1256)\"}\nconvert_from | &lt;!doctype html&gt;                                                                                                                                                                                                                                                                                                                                                                  +\n             | &lt;html&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             | &lt;head&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             |     &lt;title&gt;Example Domain&lt;/title&gt;                                                                                                                                                                                                                                                                                                                                                +\n             |                                                                                                                                                                                                                                                                                                                                                                                  +\n             |     &lt;meta charset=\"utf-8\" /&gt;                                                                                                                                                                                                                                                                                                                                                     +\n             |     &lt;meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /&gt;                                                                                                                                                                                                                                                                                                        +\n             |     &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;                                                                                                                                                                                                                                                                                                       +\n             |     &lt;style type=\"text/css\"&gt;                                                                                                                                                                                                                                                                                                                                                      +\n             |     body {                                                                                                                                                                                                                                                                                                                                                                       +\n             |         background-color: #f0f0f2;                                                                                                                                                                                                                                                                                                                                               +\n             |         margin: 0;                                                                                                                                                                                                                                                                                                                                                               +\n             |         padding: 0;                                                                                                                                                                                                                                                                                                                                                              +\n             |         font-family: -apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;                                                                                                                                                                                                                                      +\n             |                                                                                                                                                                                                                                                                                                                                                                                  +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     div {                                                                                                                                                                                                                                                                                                                                                                        +\n             |         width: 600px;                                                                                                                                                                                                                                                                                                                                                            +\n             |         margin: 5em auto;                                                                                                                                                                                                                                                                                                                                                        +\n             |         padding: 2em;                                                                                                                                                                                                                                                                                                                                                            +\n             |         background-color: #fdfdff;                                                                                                                                                                                                                                                                                                                                               +\n             |         border-radius: 0.5em;                                                                                                                                                                                                                                                                                                                                                    +\n             |         box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);                                                                                                                                                                                                                                                                                                                            +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     a:link, a:visited {                                                                                                                                                                                                                                                                                                                                                          +\n             |         color: #38488f;                                                                                                                                                                                                                                                                                                                                                          +\n             |         text-decoration: none;                                                                                                                                                                                                                                                                                                                                                   +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     @media (max-width: 700px) {                                                                                                                                                                                                                                                                                                                                                  +\n             |         div {                                                                                                                                                                                                                                                                                                                                                                    +\n             |             margin: 0 auto;                                                                                                                                                                                                                                                                                                                                                      +\n             |             width: auto;                                                                                                                                                                                                                                                                                                                                                         +\n             |         }                                                                                                                                                                                                                                                                                                                                                                        +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     &lt;/style&gt;                                                                                                                                                                                                                                                                                                                                                                     +\n             | &lt;/head&gt;                                                                                                                                                                                                                                                                                                                                                                          +\n             |                                                                                                                                                                                                                                                                                                                                                                                  +\n             | &lt;body&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             | &lt;div&gt;                                                                                                                                                                                                                                                                                                                                                                            +\n             |     &lt;h1&gt;Example Domain&lt;/h1&gt;                                                                                                                                                                                                                                                                                                                                                      +\n             |     &lt;p&gt;This domain is for use in illustrative examples in documents. You may use this                                                                                                                                                                                                                                                                                            +\n             |     domain in literature without prior coordination or asking for permission.&lt;/p&gt;                                                                                                                                                                                                                                                                                                +\n             |     &lt;p&gt;&lt;a href=\"https://www.iana.org/domains/example\"&gt;More information...&lt;/a&gt;&lt;/p&gt;                                                                                                                                                                                                                                                                                                +\n             | &lt;/div&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             | &lt;/body&gt;                                                                                                                                                                                                                                                                                                                                                                          +\n             | &lt;/html&gt;                                                                                                                                                                                                                                                                                                                                                                          +\n             | \n</code></pre>"},{"location":"omni_httpc/reference/#response-columns","title":"Response columns","text":"Column Type Description version smallint http_major &lt;&lt; 8 + http_minor 3 status smallint HTTP response status (200, 404, etc.) headers omni_http.http_headers Response headers body bytea Response body error text If not <code>NULL</code>, an error occurred during request"},{"location":"omni_httpc/reference/#configuring-request-execution","title":"Configuring request execution","text":"<p>It is also possible to configure certain parameters of request execution. </p> <p>In this example, we're making <code>omni_httpc</code> switch to HTTP/2:</p> <pre><code>select version &gt;&gt; 8 as http_version, status, headers from\nomni_httpc.http_execute_with_options(omni_httpc.http_execute_options(http2_ratio =&gt; 100), omni_httpc.http_request('https://example.com'),\nomni_httpc.http_request('https://example.org'))\n</code></pre> <p>You can now see that <code>http_version</code> is set to <code>2</code>:</p> <pre><code>-[ RECORD 1 ]+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nhttp_version | 2\nstatus       | 200\nheaders      | {\"(age,592467)\",\"(cache-control,max-age=604800)\",\"(content-type,\\\"text/html; charset=UTF-8\\\")\",\"(date,\\\"Mon, 29 May 2023 23:49:05 GMT\\\")\",\"(etag,\\\"\\\"\\\"3147526947+ident\\\"\\\"\\\")\",\"(expires,\\\"Mon, 05 Jun 2023 23:49:05 GMT\\\")\",\"(last-modified,\\\"Thu, 17 Oct 2019 07:18:26 GMT\\\")\",\"(server,\\\"ECS (sec/976A)\\\")\",\"(vary,Accept-Encoding)\",\"(x-cache,HIT)\",\"(content-length,1256)\"}\n-[ RECORD 2 ]+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nhttp_version | 2\nstatus       | 200\nheaders      | {\"(age,500311)\",\"(cache-control,max-age=604800)\",\"(content-type,\\\"text/html; charset=UTF-8\\\")\",\"(date,\\\"Mon, 29 May 2023 23:49:05 GMT\\\")\",\"(etag,\\\"\\\"\\\"3147526947+ident\\\"\\\"\\\")\",\"(expires,\\\"Mon, 05 Jun 2023 23:49:05 GMT\\\")\",\"(last-modified,\\\"Thu, 17 Oct 2019 07:18:26 GMT\\\")\",\"(server,\\\"ECS (sec/96ED)\\\")\",\"(vary,Accept-Encoding)\",\"(x-cache,HIT)\",\"(content-length,1256)\"}\n</code></pre>"},{"location":"omni_httpc/reference/#options","title":"Options","text":"Option Type Description Default http2_ratio smallint Percentage of requests to be attempted with HTTP/2 <code>(0..100)</code> 4 <code>0</code> http3_ratio smallint Percentage of requests to be attempted with HTTP/3 <code>(0..100)</code> 4 <code>0</code> force_cleartext_http2 bool Allow HTTP/2 to be used without SSL <code>false</code> <p>More options will be added in the near future</p>"},{"location":"omni_httpc/reference/#connection-pool","title":"Connection Pool","text":"<p>In every Postgres process, <code>omni_httpc</code> maintains a connection pool shared across function calls. You can inspect it by calling <code>omni_httpc.http_connections</code>:</p> <pre><code>select * from omni_httpc.http_connections\n</code></pre> <p>Sample output:</p> <pre><code>http_protocol |     url     \n---------------+-------------\n             2 | example.com\n             2 | example.org\n(2 rows)\n</code></pre>"},{"location":"omni_httpc/reference/#background-mode","title":"Background mode","text":"<p>Not yet supported</p> <p>There's a plan to add a capability for processing HTTP requests in background, executing SQL queries upon request completion.</p> <p>However, this work has not been done yet. You're welcome to contribute</p> <ol> <li> <p>NULL is illegal\u00a0\u21a9</p> </li> <li> <p><code>GET</code>, <code>HEAD</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>CONNECT</code>, <code>OPTIONS</code>, <code>TRACE</code>, <code>PATCH</code> \u21a9</p> </li> <li> <p>This will likely be changed in the upcoming release\u00a0\u21a9</p> </li> <li> <p>The sum of <code>http2_ratio</code> and <code>http3_ratio</code> must not exceed <code>100</code> \u21a9\u21a9</p> </li> </ol>"},{"location":"omni_httpd/architecture/","title":"Architecture","text":"<p>omni_httpd serves HTTP connections by employing a fleet of background workers.</p> <p>There's a master worker that handles starting HTTP workers and handling configuration change requests 1</p> <p>There are multiple HTTP workers 2. Each HTTP worker is an instance of Postgres and can therefore handle incoming requests. This is done by running handlers defined in the <code>omni_httpd.handlers</code> table on the main thread, and handling network I/O of HTTP requests and responses on a secondary thread 3.</p> <p>To enable scenarios where multiplexing is possible (such as HTTP/2), omni_httpd will attempt to re-send incoming HTTP/2 (or higher) requests to other workers if the current worker is busy handling a request.</p> <p>Below is a diagram outlining general workflow.</p> <pre><code>sequenceDiagram\n    autonumber\n    actor B as Browser\n    box lightyellow Multiple instances\n      participant H as HTTP server thread\n      participant HW as HTTP worker\n    end\n    participant MW as Master worker\n    participant P as Postgres\n    actor O as Operator\n\n    P --&gt;&gt; MW: Start background worker\n    loop omni_httpd.http_workers GUC times\n      MW --&gt;&gt; HW: Start background worker\n    end\n    HW --&gt;&gt; H: Start\n    loop for every request\n      B -&gt;&gt; H: HTTP request\n      critical Dispatch\n       H -&gt;&gt; HW: Request\n       HW -&gt;&gt; HW: Run handler query\n      option HTTP worker busy (HTTP/2+)\n       H -&gt;&gt; H: proxy to another worker\n      option HTTP worker busy (HTTP/1)\n       H -&gt;&gt; H: Wait until not busy\n      end\n      HW -&gt;&gt; H: Response\n      H -&gt;&gt; B: Response\n    end\n\n    O -&gt;&gt; P: Update listeners and/or handlers</code></pre> Want to know more? <ul> <li> Master worker opens the listening socket and shares it with HTTP    workers over a UNIX socket (using <code>SCM_RIGHTS</code>). More work needs to    be done to improve this. Please consider contributing!</li> <li> Actual HTTP functionality is enabled by awesome h2o web server. Particularly,   its libh2o component.</li> </ul> <ol> <li> <p>Triggered by changes to <code>omni_httpd.listeners</code> or <code>omni_httpd.handlers</code> or manually using <code>omni_httpd.reload_configuration()</code>)\u00a0\u21a9</p> </li> <li> <p>Can be configured using <code>omni_httpd.http_workers</code> configuration variable. Defaults to number of CPU cores online.\u00a0\u21a9</p> </li> <li> <p>This thread is strictly prohibited from calling into Postgres.\u00a0\u21a9</p> </li> </ol>"},{"location":"omni_httpd/headers/","title":"Headers","text":"<p>HTTP requests come with headers, which can be retrieved using <code>omni_http.header_get</code> and <code>omni_http.header_get_all</code> functions:</p> <pre><code>select omni_http.http_header_get(request.headers, 'host') as host;\nselect omni_http.http_header_get_all(request.headers, 'accept') as accept;\n</code></pre> <p>The header name these functions take is case-insensitive.</p>"},{"location":"omni_httpd/intro/","title":"Intro","text":"<p>omni_httpd is an embedded HTTP server for Postgres. It allows one to write HTTP request handling in SQL. This approach lends to less indirection that is common in traditional application architectures, where applications are interacting with the database directly.</p>"},{"location":"omni_httpd/intro/#getting-started","title":"Getting started.","text":"<p>By default, <code>omni_httpd</code>, once installed, will provide a default page on port <code>8080</code>.</p> <p>You can change the handler by updating the <code>query</code> column in the <code>handlers</code> table. Currently, the idiomatic way to write this query is to use <code>omni_httpd.cascading_query</code> aggregate function (though, of course, one can roll their own SQL completely by hand). This function simplifies building priority-sorted request handling:</p> <pre><code>update omni_httpd.handlers\nset\nquery =\n(select\nomni_httpd.cascading_query(name, query order by priority desc nulls last)\nfrom\n(values\n('headers',\n$$select omni_httpd.http_response(body =&gt; request.headers::text) from request where request.path = '/headers'$$,\n1),\n('not_found',\n$$select omni_httpd.http_response(status =&gt; 404, body =&gt; 'Not found') from request$$, 0))\nas routes(name, query, priority));\n</code></pre> What if the query is invalid? <p>omni_httpd enforces validity of the query using a constraint trigger at the transaction boundary when updating or inserting a handler. This means that once the transaction is being committed, the query is validated and if it, say, refers to an unknown relation, column or is invalid for other reasons, it will be rejected and the transaction will not succeed.</p> <p>Please note, however, that at this moment, this enforcement will not help avoiding runtime errors if you render your query invalid afterwards (for example, by dropping relations it references), this will lead to runtime errors, ultimately leading to HTTP 500 responses.</p> <p>The query called <code>headers</code> will dump request's headers, <code>not_found</code> will return HTTP 404. We can test it with <code>curl</code>:</p> <pre><code>$ curl http://localhost:8080\nNot found\n$ curl http://localhost:8080/headers\n{\"(user-agent,curl/7.86.0,t)\",\"(accept,*/*,t)\"}\n</code></pre> <p>The above method of defining the handler can work well when the queries that it is composed of are either stored in a database or can be retrieved during deployment (say, from a Git repository or any other source.)</p> What did you mean by \"priority-sorted\" request handling? <p>If you look at the order of handlers we added (<code>headers</code> followed by <code>not_found</code>), it means that <code>cascading_query</code>-built query will first try to get results from <code>headers</code> and if none available, will attempt <code>not_found</code>. Suppose we changed the order:</p> <pre><code>update omni_httpd.handlers\nset\nquery =\n(select\nomni_httpd.cascading_query(name, query order by priority asc nulls last) -- (1)\nfrom\n(values\n('headers',\n$$select omni_httpd.http_response(body =&gt; request.headers::text) from request where request.path = '/headers'$$,\n1),\n('not_found',\n$$select omni_httpd.http_response(status =&gt; 404, body =&gt; 'Not found') from request$$, 0))\nas routes(name, query, priority));\n</code></pre> <ol> <li>We changed the order from <code>desc</code> to <code>asc</code></li> </ol> <p>Then <code>not_found</code> will always take the precedence:</p> <pre><code>$ curl http://localhost:8080\nNot found\n$ curl http://localhost:8080/headers\nNot found\n</code></pre> <p>Tip</p> <p>An interesting corollary to this approach is that if all of the handling sub-queries are of the same priority, then priority-ordering is not required and one can simply use <code>cascading_query</code> without <code>ORDER BY</code>.</p> What does <code>cascading_query</code> do? <p>The idea behind <code>cascading_query</code> is that it aggregates named queries in a <code>UNION</code> query where all given queries will become common table expressions (CTEs) and the <code>UNION</code> will be used to cascade over them, something like:</p> <pre><code>with\nheaders as (...),\nnot_found as (...)\nselect *\nfrom\nheaders\nunion all\nselect *\nfrom\nnot_found\nwhere\nnot exists(select from headers)\n</code></pre> <p>All good. But looking back into the queries itself, they mention <code>request</code> which is nowhere to be found. Where does this come from? This is actually a CTE that <code>omni_httpd</code> supplies in runtime that has the following <code>omni_httpd.http_request</code> signature:</p> <pre><code>method omni_http.http_method,\npath text,\nquery_string text,\nbody bytea,\nheaders omni_http.http_header[]\n</code></pre> <p>Tip</p> <p>If this signature seem a little incomplete (where's the source IP address, can the body by streamed, etc.?), that's because it is still work in progress. Please consider contributing if you feel up to it.</p> <p>Also, omni_web provides complementary higher-level functionality.</p> <p>In order to test your request handlers without having to run actual HTTP requests against it, one can use <code>omni_httpd.http_request</code> function to compose requests:</p> <pre><code>with\nrequest as (select (omni_httpd.http_request('/')).*)\nselect\nomni_httpd.http_response(request.path)\nfrom\nrequest\n</code></pre> Parameter Type Description Default path text Path None method omni_http.http_method HTTP method [^http-method] <code>GET</code> query_string text Query string <code>NULL</code> headers omni_http.http_headers An array of HTTP headers empty array body bytea Request body <code>NULL</code>"},{"location":"omni_httpd/reverse_proxy/","title":"Reverse Proxy","text":"<p>omni_httpd has a capability to respond to HTTP requests with other outcomes. Of a particular interest is <code>http_proxy</code> as it allows us to dynamically proxy and re-process the incoming HTTP request to a backend:</p> <pre><code>select\nomni_httpd.http_proxy('http://127.0.0.1:9000' || request.path)\nfrom\nrequest\n</code></pre> <p>The above will simply redirect all incoming requests to <code>127.0.0.1</code> (port <code>9000</code>) over plain HTTP with the request path being sent as-is.</p> <p>This approach retrieving the target for proxying dynamically based on data in the database, the incoming request itself or any other data that can be retrieved in a query.</p> Potential performance implications <p>This is a new feature and it hasn't been extensively benchmarked. Determining proxying information in runtime may have some performance implications.</p> <p>In the future, we may provide a dedicated configuration for backend proxying that will allow for configuration-time resolution of the backends (for example, to fetch them from a table), if the performance implications will be too taxing in some use-cases.</p>"},{"location":"omni_httpd/reverse_proxy/#additional-options","title":"Additional Options","text":"<p><code>omni_httpd.http_proxy</code> takes the following optional parameters:</p> Name Description Default <code>preserve_host</code> Pass <code>Host</code> header from the incoming request to the backend <code>true</code>"},{"location":"omni_httpd/security/","title":"Security","text":"<p>HTTP server hardening</p> <p>At this moment, this extension does not provide any additional hardening for the HTTP server functionality to prevent any unintended interaction between the server and the database outside of strict confines of the message passing approach used for their intended way of communication.</p> <p>We are eager to add support for such hardening (perhaps as an opt-in if it  significantly decreases performance). Please consider contributing.</p>"},{"location":"omni_httpd/security/#handler-queries","title":"Handler Queries","text":"<p>The security model behind handler query execution relies on the <code>role_name</code> column in the <code>handlers</code> table. It can be set only to the role that is \"accessible\" to the current user (meaning either it is the same role or the current user can set this role given its permissions.)</p> <p>Each request will be executed with this role as a security restricted mode that disallows <code>SET ROLE</code> (<code>SECURITY_LOCAL_USERID_CHANGE</code>)1, prevent the code to elevate its privileges.</p> <ol> <li> <p>unless this role is a superuser itself\u00a0\u21a9</p> </li> </ol>"},{"location":"omni_httpd/static_file/","title":"Static File Server","text":"<p><code>omni_httpd</code> dispatching can include a static file server to handle serving  static assets through <code>omni_vfs</code> virtual filesystem later.</p>"},{"location":"omni_httpd/static_file/#requirements","title":"Requirements","text":"<p>The following extensions are required:</p> <ul> <li>omni_vfs</li> <li>omni_mimetypes</li> </ul>"},{"location":"omni_httpd/static_file/#setup","title":"Setup","text":"<p>As discussed in <code>omni_vfs</code> documentation, one needs to define a mount point. </p> <pre><code>create function mount_point() returns omni_vfs.local_fs\nlanguage sql as\n$$\nselect omni_vfs.local_fs('/path/to/dir')\n$$\n</code></pre> <p>This example above returns a local filesystem-based VFS. In production, you  may want to consider other filesystems.</p> <p>Now, we want to update our listener handler to serve this filesystem  alongside with some other endpoints:</p> <pre><code> update omni_httpd.handlers\nset\nquery =\n(select\nomni_httpd.cascading_query(name, query order by priority desc nulls last)\nfrom (select * from omni_httpd.static_file_handlers('mount_point', 0)\nunion (values\n('test',\n$$ select omni_httpd.http_response('passed') from request where request.path = '/test'$$, 1))) routes)\n</code></pre> <p>The above connects <code>mount_point()</code> filesystem and defines a handler for  <code>/test</code> (with a higher priority).</p>"},{"location":"omni_json/table_mapping/","title":"Table Mapping","text":"<p>This extension allows you to map tables to JSON, extending <code>to_jsonb</code>  function by overloading it for a particular table type.</p> <p>By default, one can use <code>to_jsonb</code> on any existing table type and get a JSON  out:</p> <pre><code> create table example (\nid           integer primary key generated always as identity,\nfirst_name   text,\nlast_name    text,\ndob          date\n);\nselect to_jsonb(example.*) from example;\n</code></pre> <p>results in</p> <pre><code>{\n\"id\": 1, \"dob\": \"1971-12-12\", \"last_name\": \"Doe\", \"first_name\": \"John\"\n}\n</code></pre> <p>However, the moment you need to perform some transformation, it becomes less  useful. This is where this extension helps. One can define a mapping for a  table using <code>omni_json.define_table_mapping(type, annotation)</code> where  annotation is a JSON document:</p> <pre><code>select omni_json.define_table_mapping(example, '{}')\n</code></pre>"},{"location":"omni_json/table_mapping/#configuring-columns","title":"Configuring columns","text":"<p>By specifying <code>columns</code> object with a for a given column, one can configure  column properties.</p> <pre><code>select omni_json.define_table_mapping(example, $$\n{\n  \"columns\": { \"my_column\": { ... } }\n}\n$$);\n</code></pre>"},{"location":"omni_json/table_mapping/#renaming-keys","title":"Renaming keys","text":"<p><code>path</code> annotation for a column can be used to rename it</p> <pre><code>{\n\"columns\": {\n\"dob\": {\n\"path\": \"date_of_birth\"\n}\n}\n}\n</code></pre> <p>Now, if you re-run <code>to_jsonb</code> you will get this:</p> <pre><code>{\n\"id\": 1, \"date_of_birth\": \"1971-12-12\", \"last_name\": \"Doe\", \"first_name\": \"John\"\n}\n</code></pre>"},{"location":"omni_json/table_mapping/#moving-keys","title":"Moving keys","text":"<p><code>path</code> annotation can also be used to move columns to a given path when given  an array of keys:</p> <pre><code>{\n\"columns\": {\n\"first_name\": {\n\"path\": [\"name\", \"first\"]\n},\n\"last_name\": {\n\"path\": [\"name\", \"last\"]\n}\n}\n}\n</code></pre> <p>Now, if you re-run <code>to_jsonb</code> you will get this:</p> <pre><code>{\n\"id\": 1, \"date_of_birth\": \"1971-12-12\",\n\"name\": {\n\"last\": \"Doe\",\n\"first\": \"John\"\n}\n}\n</code></pre> <p>In fact, it can also move columns to arrays. </p> <pre><code>{\n\"columns\": {\n\"first_name\": {\n\"path\": [\"name\", 0]\n},\n\"last_name\": {\n\"path\": [\"name\", 1]\n}\n}\n}\n</code></pre> <p>Now, if you re-run <code>to_jsonb</code> you will get this:</p> <pre><code>{\n\"id\": 1, \"date_of_birth\": \"1971-12-12\",\n\"name\": [\n\"John\",\n\"Doe\"\n]\n}\n</code></pre>"},{"location":"omni_json/table_mapping/#column-exclusion","title":"Column exclusion","text":"<p>Imagine we don't want to show date of birth in the above example. We can do  so by simply excluding it:</p> <pre><code>{\n\"columns\": {\n\"dob\": {\n\"exclude\": true\n}\n}\n}\n</code></pre> <p>Now, if you re-run <code>to_jsonb</code> you will get this:</p> <pre><code>{\n\"id\": 1,\n\"last_name\": \"Doe\",\n\"first_name\": \"John\"\n}\n</code></pre>"},{"location":"omni_json/table_mapping/#column-transformation","title":"Column transformation","text":"<p>In certain cases (such as dealing with sensitive information or non-conforming data), it would be beneficial to be able to transform data when it is converted either from JSON or to JSON.</p> <p>This is where <code>transform</code> option comes into the picture.</p> <pre><code>{\n\"columns\": {\n\"password\": {\n\"transform\": {\n\"input\": {\n\"type\": \"text\",\n\"function\": \"encrypt_password\"\n}\n}\n}\n}\n}\n</code></pre> <p>The above will apply <code>encrypt_password(text)</code> to convert <code>password</code> in the JSON object to the value in a record. Other <code>type</code>s are: <code>json</code> and <code>jsonb</code> and they will call <code>encrypt_password(json)</code> and <code>encrypt_password(jsonb)</code> respectively.</p> <p>Similarly, there's support for serializing back to JSON:</p> <pre><code>{\n\"columns\": {\n\"password\": {\n\"transform\": {\n\"output\": {\n\"type\": \"text\",\n\"function\": \"mask_password\"\n}\n}\n}\n}\n}\n</code></pre> <p>This will make <code>to_jsonb</code> call <code>mask_password(password)</code> and expect it to return <code>text</code>. Similarly, other supported types for the return value are <code>json</code> and <code>jsonb</code>.</p>"},{"location":"omni_json/table_mapping/#operational-guide","title":"Operational Guide","text":""},{"location":"omni_json/table_mapping/#retrieving-json","title":"Retrieving JSON","text":"<p>You can use <code>to_jsonb(table_name.*)</code> as you would typically do, but the transformation rules described above will apply.</p> <pre><code>select\nto_jsonb(products.*)\nfrom\nproducts\n</code></pre>"},{"location":"omni_json/table_mapping/#updating-from-json","title":"Updating from JSON","text":"<p>You can update explicitly listed fields using the following construct:</p> <pre><code>update people\nset\n-- `dob`, `first_name` and `last_name` are allowed to be updated\n(dob, first_name, last_name) =\n(select\ndob,\nfirst_name,\nlast_name\nfrom\njsonb_populate_record(people.*,\n'{\"dob\": \"1981-12-12\"}'))\nwhere\nid = some_id </code></pre>"},{"location":"omni_json/table_mapping/#inserting-json","title":"Inserting JSON","text":"<p>Similarly to update, JSON can be also inserted</p> <pre><code>insert\ninto\npeople (dob, first_name, last_name)\n(select\ndob,\nfirst_name,\nlast_name\nfrom\njsonb_populate_record(null::people,\n'{\"first_name\": \"Jane\", \"last_name\": \"Doe\", \"dob\": \"1981-12-12\"}'))\n</code></pre>"},{"location":"omni_mimetypes/reference/","title":"omni_mimetypes","text":"<p>This extension contains MIME types and their attributes collected from various sources:</p> <ul> <li>IANA</li> <li>Apache</li> <li>Nginx</li> </ul> <p>The extension is implemented purely in SQL and PL/pgSQL.</p> <p>Credits</p> <p>The data has been fetched from mime-db, authors and maintainers of which did all the hard work.</p>"},{"location":"omni_mimetypes/reference/#examples","title":"Examples","text":""},{"location":"omni_mimetypes/reference/#querying-mime-type-for-file-extension","title":"Querying MIME type for file extension","text":"<pre><code>select\nmime_types.name\nfrom\nomni_mimetypes.mime_types\ninner join omni_mimetypes.mime_types_file_extensions mtfe on mtfe.mime_type_id = mime_types.id\ninner join omni_mimetypes.file_extensions on mtfe.file_extension_id = file_extensions.id\nwhere\nfile_extensions.extension = 'js'\n</code></pre> <p>Result:</p> <pre><code>          name          \n------------------------\n application/javascript\n(1 row)\n</code></pre>"},{"location":"omni_mimetypes/reference/#tables","title":"Tables","text":""},{"location":"omni_mimetypes/reference/#mime_types","title":"mime_types","text":"<p>Contains all the MIME types obtained from the upstream databases or custom-added.</p> Column Type Description id integer Primary key name text Unique name source mime_type_source <code>iana</code>, <code>apache</code>, <code>nginx</code> or <code>NULL</code> (probably a custom media type) compressible bool Whether a file of this type can be gzipped (nullable) charset text The default charset associated with this type, if any."},{"location":"omni_mimetypes/reference/#file_extensions","title":"file_extensions","text":"<p>Contains all known file extensions.</p> Column Type Description id integer Primary key extension text File extension (without a preceding dot)"},{"location":"omni_mimetypes/reference/#mime_types_file_extensions","title":"mime_types_file_extensions","text":"<p>Maps file extensions to MIME types.</p> Column Type Description mime_type_id integer Foreign key or mime_types.id file_extension_id integer Foreign key or file_extensions.id"},{"location":"omni_mimetypes/reference/#updating-the-database","title":"Updating the database","text":"<p>One can manually modify the above tables or fetch a newer version of <code>mime-db</code> using <code>import_mime_db</code> function:</p> <pre><code>create extension omni_httpc cascade; -- (1)\nwith\ndb as (select *\nfrom\nomni_httpc.http_execute(\nomni_httpc.http_request(\n'https://cdn.jsdelivr.net/gh/jshttp/mime-db@1.52.0/db.json')) as import) -- (2)\nselect\nomni_mimetypes.import_mime_db(convert_from(body, 'utf8')::jsonb)\nfrom\ndb;\n</code></pre> <ol> <li>This gives us an HTTP client.</li> <li>Adjust <code>mime-db</code> version as desired</li> </ol>"},{"location":"omni_schema/reference/","title":"omni_schema","text":"<p>This extension allows application schemas to be managed easily, both during development and deployment.</p>"},{"location":"omni_schema/reference/#migrations","title":"Migrations","text":"<p>This extension provides <code>migrate_from_fs</code> function that executes SQL migrations from a file system (provided by the <code>omni_vfs</code> extension.)</p> <pre><code>select *\nfrom\nomni_schema.migrate_from_fs(omni_vfs.local_fs('/path/to/project/migrations'))\n</code></pre> <p>It returns a set of <code>text</code> with each element being the file name executed.</p> <p>The above invocation is most useful for development environment or deployment that is done with the backing of a local file system. In the near future, more file systems will be added, and that will facilitate more ergonomic scenarios.</p> <p>Can't define a new filesystem?</p> <p>You can specify <code>path</code> optional parameter to indicate where the migrations reside on the file system:</p> <pre><code>select *\nfrom\nomni_schema.migrate_from_fs(omni_vfs.local_fs('/path/to/project'), 'migrations')\n</code></pre> <p>This function will recursively find all files with <code>.sql</code> extension and apply them ordered by path name, excluding those that were already applied before. For this purpose, it maintains the <code>omni_schema.migrations</code> table.</p> Column Type Description id int Unique identifier name text Migration (file) name migration text The source code of the migration applied_at timestamp Time of migration application 1"},{"location":"omni_schema/reference/#object-reloading","title":"Object reloading","text":"<p>For certain types of schema objects , it is possible to reload their contents without having to create a migration every time they change (which is fairly suboptimal, especially when it comes to tracking their changes in a version control system.) The types supported are:</p> <ul> <li>functions</li> <li>policies</li> <li>views</li> </ul> <p>This extension provides <code>load_from_fs</code> function that will reload all such objects from a local on a file system (provided by the <code>omni_vfs</code> extension), similar to <code>migrate_from_fs</code>:</p> <pre><code>select *\nfrom\nomni_schema.load_from_fs(omni_vfs.local_fs('/path/to/project/migrations'))\n</code></pre> <p>Its return type and parameters are currently identical to those of <code>migrate_from_fs</code>.</p>"},{"location":"omni_schema/reference/#multi-language-functions","title":"Multi-language functions","text":"<p>Object reloading functionality allows one to load functions from '.sql' files which can contain SQL or PL/pgSQL functions defined verbatim:</p> test_function.sql<pre><code>create function test_function(a integer) returns integer\nlanguage sql\nas\n$$\nselect a &gt; 1\n$$;\ncreate function test_function(a integer) returns integer\nlanguage plpgsql\nas\n$$\nbegin\nreturn a &gt; 1;\nend\n$$;\n</code></pre> <p>Such files can contain multiple function definitions.</p> <p>One can note, however, that SQL or PL/pgSQL is not always the best fit for a particular problem. This is reflected in the fact that Postgres has an ecosystem of other programming languages. However, writing code in those languages inside of SQL files is a sub-par development experience: syntax highlighting, auto-completion may not work; external tools that work with this languages are unaware of this embedding technique.</p> <p>To address this, this extension provides extensible support for custom languages.</p> <p>There are two components to this:</p> <ul> <li>in-file function signature directive (conceptually similar   to shebang)</li> <li><code>omni_schema.languages</code> tables that defines mapping of languages</li> </ul> <p>The directive part is pretty simple: anywhere in the file, typically a comment you can put a snippet that looks like this, enclosed within <code>SQL[[...]]</code>:</p> times_ten.py<pre><code># SQL[[create function times_ten(a integer) returns integer]]\nreturn a * 10\n</code></pre> <p>The extension is syntax-agnostic, so it'll look for this type of line anywhere, comments, or code. It will then match the extension of the file to the language and append the given <code>create function</code> line with an appropriate <code>language ... as</code> construct and pass the contents of the entire file to it 2.</p> <p>Future vision</p> <p>In the future, we want to be able to provide a more sophisticated  functionality to supported languages, like allowing to define multiple  functions per file, use native language annotation/type systems to  infer the SQL function signature or detect language when file extensions are ambiguous (like <code>.pl</code> for Perl and Prolog).</p> <p>Currently supported languages:</p> <ul> <li>SQL and PL/pgSQL (<code>.sql</code>) 3</li> <li>Python (<code>.py</code>)</li> <li>Perl (<code>.pl</code>, <code>.trusted.pl</code>)</li> <li>Tcl (<code>.tcl</code>, <code>.trusted.tcl</code>)</li> <li>Rust (<code>.rs</code>)</li> </ul> <p>If an extension required for the support of a language is not installed, files in that language will be skipped and a notice will be given, similar to this one:</p> <pre><code>Extension pltclu required for language pltclu (required for foo.tcl)\nis not installed\n</code></pre> <p>The support for languages is configurable through <code>omni_schema.languages</code> table:</p> Column Type Description file_extension text Filename extension without the preceding dot. _Examples: <code>py</code>, <code>trusted.pl</code>, <code>rs</code> language name Language identifier to be used <code>create function ... language</code> extension name Extension that implements the language, if required <ol> <li> <p>The timestamp defaults to <code>now()</code> which means that migrations applied in the same transaction all get the same value of <code>applied_at</code>, which can be used for grouping them together.\u00a0\u21a9</p> </li> <li> <p>This means you can only define one function per file at the moment.\u00a0\u21a9</p> </li> <li> <p>SQL language is always supported, even if corresponding entry is removed from <code>omni_schema.languages</code>. This behavior may change in the future.\u00a0\u21a9</p> </li> </ol>"},{"location":"omni_seq/id/","title":"Distributed IDs","text":""},{"location":"omni_seq/id/#sequences-and-distributed-ids","title":"Sequences and Distributed IDs","text":"<p>You may have learned that one of the current limitations of Postgres logical replication is that sequence data is not replicated:</p> <p>From Postgres documentation:</p> <p>The data in serial or identity columns backed by sequences will of course be replicated as part of the table, but the sequence itself would still show the start value on the subscriber.  If the subscriber is used as a read-only database, then this should typically not be a problem.  If, however, some kind of switchover or failover to the subscriber database is intended, then the sequences would need to be updated to the latest values, either by copying the current data from the publisher  (perhaps using pg_dump) or by determining a sufficiently high value from the tables themselves.</p> <p>This may be an undesirable behavior in some scenarios. Indeed, if there was a switchover, and a replica was to continue with the insertion of new records, it'll start failing with primary key constraint violation because sequence counters (\"sequence data\") has not been replicated.</p> <p>In this extension, you can work around this limitation by using one of the distributed (or prefixed) identifier types. The core of the idea is that every ID should contain a node identifier (prefix) and an identifier itself.</p>"},{"location":"omni_seq/id/#types","title":"Types","text":"<p>These types are named using the following pattern: <code>omni_seq.id_&lt;TYPE&gt;_&lt;TYPE&gt;</code>, where <code>TYPE</code> is one of the following:</p> <ul> <li><code>int16</code></li> <li><code>int32</code></li> <li><code>int64</code></li> </ul> <p>For brevity, where prefix type and identifier type are the same, the type is not repeated, so instead of <code>omni_seq.id_int64_int64</code> we call it <code>omni_seq.id_int64</code>.</p>"},{"location":"omni_seq/id/#how-to-use","title":"How to Use","text":"<p>One can use it as a default value for a primary key, with an explicitly created sequence:</p> <pre><code>create sequence seq;\ncreate table t\n(\nid omni_seq.id_int64 primary key not null default\nomni_seq.id_int64_nextval(NODE_ID, 'seq') -- (1)\n);\n</code></pre> <ol> <li><code>NODE_ID</code> is either a number assigned to the current node or a unique system identifier (which can be retrieved using <code>omni_seq.system_identifier()</code>1 function)</li> </ol> Why not <code>generated always as identity</code>? <p>The reason why we can't use <code>generated ... as identity</code> syntax is that this functionality is tied to local counters.</p> <p>We also can't use generated columns at all, as \"the generation expression can only use immutable functions\", and <code>nextval</code> is volatile as it increments the sequence counter.</p>"},{"location":"omni_seq/id/#migration-guide","title":"Migration Guide","text":"<p>If you already have a table that you might need to prepare for prefixed identifiers, this guide will show how it can be done relatively easily.</p> <p>Let's assume we have a table with an <code>integer</code> primary key:</p> <pre><code>create table my_table (\nid integer primary key generated always as identity\n);\ninsert into my_table select from generate_series(1, 10);\n</code></pre> <p>Now we want to add a 64-bit2 prefixed identifier, reusing the existing sequence locally.</p> <pre><code>create extension if not exists omni_seq;\nbegin;\nlock table my_table; -- (1)\nalter table my_table\nalter column id drop identity if exists;\ncreate sequence my_table_id_seq;\nalter table my_table\nalter column id type omni_seq.id_int64_int32 using omni_seq.id_int64_int32_make(0, id), -- (2)\nalter column id set default omni_seq.id_int64_int32_nextval(\nomni_seq.system_identifier(), 'my_table_id_seq');\ncommit;\n</code></pre> <ol> <li>Do the migration while locking other clients out.</li> <li><code>0</code> here signifies migrated rows.</li> </ol> <p>When we insert into and query the table again, we'll see this:</p> <pre><code>psql=# insert into my_table values (default) returning id;\nid           -----------------------\n7222168279780171472:1 -- (1)\n(1 row)\npsql=# table my_table;\nid           -----------------------\n0:1\n0:2\n0:3\n0:4\n0:5\n0:6\n0:7\n0:8\n0:9\n0:10\n7222168279780171472:1\n(11 rows)\n</code></pre> <ol> <li>The actual number you will see will be different</li> </ol> <p>If you already have replicas</p> <p>The database schema and DDL commands are not replicated.</p> <p>Therefore it is important to ensure that you perform the above before having a production setup.  Otherwise, take appropriate steps to ensure the above changes are applied on all replicas in sync and due caution is exercised to ensure the upgrade is atomic.</p> <p>We want to have a better answer to this. Please consider contributing your suggestions on how to handle this case.</p> <ol> <li> <p>An integer contained in the pg_control file providing a reasonably unique database cluster identifier.    The function is effectively a simplified version of <code>SELECT system_identifier FROM pg_control_system()</code> \u21a9\u21a9</p> </li> <li> <p>Postgres unique system identifier is a 64-bit integer, see 1 \u21a9</p> </li> </ol>"},{"location":"omni_txn/variables/","title":"Transaction Variables","text":"<p><code>omni_txn</code> extension provides functionality for storing typed information in a transactional scope.</p> <p>This is most useful to maintain information across multiple queries in the transaction, particularly with RLS (Row Level Security) policies in mind.</p>"},{"location":"omni_txn/variables/#setting-a-variable","title":"Setting a variable","text":"<p>Within a transaction's context, one can set a named variable with its type specified through the type of the value:</p> <pre><code>select omni_txn.set_variable('my_variable', true)\n</code></pre> <p>This code above sets a boolean-typed variable called <code>my_variable</code>. In cases when the type can't be figured out, type casting comes to the rescue:</p> <pre><code>select omni_txn.set_variable('text_variable', 'value'::text)\n</code></pre> <p>The last set variable value and type are set until the end of the current transaction boundary.</p> <p>Both value and the type of the variable can be changed by subsequent calls to <code>set_variable</code></p>"},{"location":"omni_txn/variables/#getting-a-variable","title":"Getting a variable","text":"<p>In order to get a variable from the transaction's context, one needs to specify a default value with a type in order to get a value:</p> <pre><code>select omni_txn.get_variable('my_variable', false)\n</code></pre> <p>The above will return the value of <code>my_variable</code> or <code>false</code> if it is not found.</p> <p>Will the default value be returned if variable is set to <code>null</code>?</p> <p>No, if <code>set_variable</code> was used to set a <code>null</code> value, <code>get_variable</code> will  return <code>null</code>.</p> <p>If a mismatching type information is passed to <code>get_variable</code>, <code>get_variable</code> will raise an error indicating the mismatching types in details.</p> <pre><code>begin;\nselect omni_txn.set_variable('var', 1::int);\nselect omni_txn.get_variable('var', false);\n-- ERROR:  type mismatch\n-- DETAIL:  expected integer, got boolean\n</code></pre>"},{"location":"omni_types/sum_types/","title":"Sum types","text":""},{"location":"omni_types/sum_types/#sum-types","title":"Sum Types","text":"<p>Sum types (also known as tagged unions, or enums) is a type that allows to hold a value that could take on several different types that are known ahead of time.</p> <p>In Postgres context, this allows one to return values of different types in a single query column, or store different values in a column where maintaining separate columns or tables is excessive.</p>"},{"location":"omni_types/sum_types/#defining-a-sum-type","title":"Defining a sum type","text":"<p>One can define it using <code>omni_types.sum_type</code> function, passing the intended type name and the list of variant types.</p> <p>Below, let's create a unified geometric type1:</p> <pre><code>omni_types=# select omni_types.sum_type('geom', 'point', 'line', 'lseg', 'box', 'path', 'polygon', 'circle');\nsum_type\n----------\ngeom\n(1 row)\n</code></pre> <p>We can now see it's been created:</p> <pre><code>omni_types=# \\dT geom\nlist of data types\nschema | name | Description\n--------+------+-------------\npublic | geom |\n(1 row)\nomni_types=# table omni_types.sum_types;\noid  |                 variants\n-------+-------------------------------------------\n16397 | {point,line,lseg,box,path,polygon,circle}\n(1 row) </code></pre>"},{"location":"omni_types/sum_types/#textual-representation","title":"Textual representation","text":"<p>Sum type can be initialized using textual representatin, with the variant name used to indicate the type:</p> <pre><code>omni_types=# select 'point(10,10)'::geom;\ngeom\n----------------\npoint((10,10))\n(1 row)\n</code></pre> <p>By the virtue of seeing the above output, we know that it also converts back to a textual representation using the underlying variant's representation.</p>"},{"location":"omni_types/sum_types/#conversion-and-casting","title":"Conversion and casting","text":"<p>Sum types can be casted from and to their variants.</p> <pre><code>omni_types=# select '&lt;(10,10),10&gt;'::circle::geom;\ngeom\n----------------------\ncircle(&lt;(10,10),10&gt;)\n(1 row)\nomni_types=# select '&lt;(10,10),10&gt;'::circle::geom::circle;\ncircle\n--------------\n&lt;(10,10),10&gt;\n(1 row)\n</code></pre> <p>They can also be converted using functions following the pattern of <code>&lt;type&gt;_from_&lt;type&gt;</code>:</p> <pre><code>omni_types=# select geom_from_point('10,10');\ngeom_from_point\n-----------------\npoint((10,10))\n(1 row)\nomni_types=# select point_from_geom(geom_from_point('10,10'));\npoint_from_geom\n-----------------\n(10,10)\n(1 row)\n</code></pre> <p>If one attempts to cast or convert to a wrong variant, <code>null</code> will be returned:</p> <pre><code>omni_types=# select '&lt;(10,10),10&gt;'::circle::geom::point;\npoint\n-------\nnull\n(1 row)\nomni_types=# select point_from_geom('&lt;(10,10),10&gt;'::circle::geom);\npoint_from_geom\n-----------------\nnull\n(1 row)\n</code></pre> Caveat: casting domains <p>Due to the way domains work, casting is impossible as they are rather thin layers over their base types.</p> <p>That being said, the functions described above can be used to accomplish the same:</p> <pre><code>omni_types=# create domain my_point as point;\nCREATE DOMAIN\nomni_types=# select omni_types.sum_type('my_geom','my_point');\nsum_type\n----------\nmy_geom\n(1 row)\nomni_types=# select my_geom_from_my_point('1,1');\nmy_geom_from_my_point\n-----------------------\nmy_point((1,1))\n(1 row)\nomni_types=# select my_point_from_my_geom(my_geom_from_my_point('1,1'));\nmy_point_from_my_geom\n-----------------------\n(1,1)\n(1 row)\n</code></pre>"},{"location":"omni_types/sum_types/#retrieving-the-variant-type","title":"Retrieving the variant type","text":"<p>One can determine the type of the variant to advise further processing:</p> <pre><code>omni_types=# select omni_types.variant('point(10,10)'::geom);\nvariant\n---------\npoint\n(1 row)\n</code></pre>"},{"location":"omni_types/sum_types/#changing-the-variant-type","title":"Changing the variant type","text":"<p>Sometimes it may be desirable to change the definition of a sum type. In most cases, it would be prudent to define a new type and migrate to it. However, this may be undesirable to due involved complexity. Luckily, under certain constraints, variant types can be changed:</p> <ul> <li>Only adding new variants is permitted</li> <li>For fixed-size sum types (those not containing variable-sized variants), the size of the new variant may not be larger   than that of the largest existing variant. 2</li> </ul> <pre><code>select omni_types.add_variant('geom', 'my_box');\n</code></pre> <ol> <li> <p>PostGIS defines it is own <code>geometry</code> type. Our definition is used to showcase a generalized approach.\u00a0\u21a9</p> </li> <li> <p>This is done so that Postgres would not try to read existing values using an updated, larger size, which is erroneous.\u00a0\u21a9</p> </li> </ol>"},{"location":"omni_vfs/reference/","title":"omni_vfs","text":"<p>This extension provides a unified Virtual File System (VFS) API for Postgres to interact with different file systems regardless of their backends.</p> <p>This approach allows interchangeable backends in the following scenarios:</p> <ul> <li>Interacting with files in development environment</li> </ul> <p>This enables a smooth development experience that doesn't require moving data from the filesystem to the database, like serving static files, picking up migrations, etc.</p> <ul> <li>Retrieving files from a Postgres-backed Git repositories</li> </ul> <p>This can facilitate streamline deployment rollouts as migrations and static files can be retrieved using the same API.</p> <ul> <li>Interacting with remote storages</li> </ul> <p>A lot of applications deal with remote storages like S3 or Google Cloud Storage. This interface allows using local file system when testing and a real one in staging and production, without changing anything.</p> <p>Work in progress</p> <p>This extension's API is minimalistic at this time and does not support a number of scenarios. For example, there are no writing capabilities, any form of streaming, etc.</p> <p>It is intended that this functionality will be implemented. You can also help by contributing or funding the development of features that you need.</p>"},{"location":"omni_vfs/reference/#example","title":"Example","text":"<p>The following query:</p> <pre><code>with\nfs as (select omni_vfs.local_fs('/home/omni/dev/omnigres/omnigres/extensions/omni_vfs') as fs),\nentries as (select fs, (omni_vfs.list(fs, '')).* from fs)\nselect\nentries.name,\nentries.kind,\n(omni_vfs.file_info(fs, '/' || entries.name)).*\nfrom\nentries;\n</code></pre> <p>Results in:</p> name kind size created_at accessed_at modified_at CMakeLists.txt file 429 2023-06-08 14:10:18.742915 2023-06-08 14:10:19.407029 2023-06-08 14:10:18.742915 mkdocs.yml file 50 2023-06-08 14:10:18.743315 2023-06-08 14:10:19.3241 2023-06-08 14:10:18.743315 omni_vfs.h file 229 2023-06-08 14:10:18.743582 2023-06-08 14:10:19.407321 2023-06-08 14:10:18.743582 tests dir 96 2023-06-08 14:10:18.743633 2023-06-08 14:10:20.495602 2023-06-08 14:10:18.743633 docs dir 96 2023-06-08 17:24:37.978643 2023-06-08 17:24:39.164254 2023-06-08 17:24:37.978643 local_fs.c file 9371 2023-06-08 14:39:41.67565 2023-06-08 14:40:18.467411 2023-06-08 14:39:41.67565 README.md file 12 2023-06-08 14:10:18.743 2023-06-08 14:10:19.407083 2023-06-08 14:10:18.743 omni_vfs--0.1.sql file 3073 2023-06-08 17:10:55.278702 2023-06-08 17:11:04.599535 2023-06-08 17:10:55.278702 omni_vfs.c file 347 2023-06-08 14:10:18.743496 2023-06-08 14:10:19.40728 2023-06-08 14:10:18.743496"},{"location":"omni_vfs/reference/#api","title":"API","text":""},{"location":"omni_vfs/reference/#omni_vfs_types_v1file-type","title":"<code>omni_vfs_types_v1.file</code> type","text":"<p>Describes a file entry.</p> Field Type Description name <code>text</code> File name kind <code>omni_vfs_types_v1.file_kind</code> File kind (<code>file</code>, <code>dir</code>) 2"},{"location":"omni_vfs/reference/#omni_vs_apifile_info-type","title":"<code>omni_vs_api.file_info</code> type","text":"<p>Describes file meta information.</p> Field Type Description size <code>bigint</code> File size created_at <code>timestamp</code> File creation time (if available) accessed_at <code>timestamp</code> File access time (if available) modified_at <code>timestamp</code> File modification time (if available) kind <code>omni_vfs_types_v1.file_kind</code> File kind (<code>file</code>, <code>dir</code>) 2"},{"location":"omni_vfs/reference/#omni_vfslist","title":"<code>omni_vfs.list()</code>","text":"<p>Lists a directory or a single file.</p> Parameter Type Description fs Filesystem type Filesystem path <code>text</code> Path to list. If it is a single file, returns that file fail_unpermitted <code>bool</code> Raise an error if directory can't be open. <code>true</code> by default. <p>Returns a set of <code>omni_vfs_types_v1.file</code> values.</p>"},{"location":"omni_vfs/reference/#omni_vfslist_recursively","title":"<code>omni_vfs.list_recursively()</code>","text":"<p>This is a helper function implemented for all backends that lists all files recursively.</p> Parameter Type Description fs Filesystem type Filesystem path <code>text</code> Path to list. If it is a single file, returns that file max <code>bigint</code> Limit the number of files to be returned. No limit by default. <p>Returns a set of <code>omni_vfs_types_v1.file</code></p> <p>Use caution if the directory might contain a lot of files</p> <p>If there are a lot of files, this function will use a lot of memory and will take a long time. To safeguard against this, use of <code>max</code> parameter is strongly recommended.</p> <p>One of the reasons why this function has a long name is to force its users to use it carefully and sparingly.</p>"},{"location":"omni_vfs/reference/#omni_vfsfile_info","title":"<code>omni_vfs.file_info()</code>","text":"<p>Provides file information (similar to POSIX <code>stat</code>)</p> Parameter Type Description fs Filesystem type Filesystem path <code>text</code> Path to the file <p>Returns a value of the <code>omni_vfs_types_v1.file_info</code> type.</p> <p>If file does not exist, returns <code>null</code> as there no information to be retrieved about it. In all other cases expected to raise an exception.</p>"},{"location":"omni_vfs/reference/#omni_vfsread","title":"<code>omni_vfs.read()</code>","text":"<p>Reads a chunk of the file.</p> Parameter Type Description fs Filesystem type Filesystem path <code>text</code> Path to the file file_offset <code>bigint</code> Offset to read at. Defaults to <code>0</code>. chunk_size <code>bigint</code> Number of bytes to read. By default, tries to read to the end 1. <p>Returns a <code>bytea</code> value</p>"},{"location":"omni_vfs/reference/#backends","title":"Backends","text":"<p>Currently, omni_vfs provides the following backends:</p>"},{"location":"omni_vfs/reference/#omni_vfslocal_fs-local-file-system","title":"<code>omni_vfs.local_fs</code> (local file system)","text":"<p>This backend can be created by invoking <code>omni_vfs.local_fs(mount)</code>, where <code>mount</code> is the directory that will be mounted by the backend. No access outside of this directory will be permitted. The function returns <code>omni_vfs.local_fs</code> type which only contains an identifier of the instance that references <code>omni_vfs.local_fs_mounts</code> table.</p> <p>Who can access the filesystems?</p> <p><code>omni_vfs.local_fs_mounts</code> has row-level security enabled, allowing finer tuning of access to mounts and modification of the mounts with policies. Such policies can be used to determine under which conditions mounting of new directories is possible, and which mounts can be accessed under given conditions.</p>"},{"location":"omni_vfs/reference/#runtime-backend-dispatch","title":"Runtime backend dispatch","text":"<p>In a real application, to make it possible to use different backends, one can create a file system \"factory\" function dependent on the environment they are in. For example, when in development, it can look like this:</p> <pre><code>create function app_filesystem() returns omni_vfs.local_fs\nas\n$$\nselect omni_vfs.local_fs('app')\n$$ language sql;\n</code></pre> <p>And in production, a function with the same name will return a different kind of file system backend.</p> <ol> <li> <p>Chunk size is currently limited to 1GB.\u00a0\u21a9</p> </li> <li> <p>Other file types (such as sockets) are not currently considered to be of practical use and will be reported as <code>file</code>. This may change in the future.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"omni_web/cookies/","title":"Cookies","text":""},{"location":"omni_web/cookies/#getting-cookies","title":"Getting cookies","text":"<p>One can use <code>omni_web.cookies(text)</code> to convert a <code>Cookie</code> header string  into a table of key/value pairs of cookies.</p> <pre><code>omni_web=# select * from omni_web.cookies('PHPSESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1'::text);\nname    |      value      -----------+-----------------\nPHPSESSID | 298zf09hf012fh2\ncsrftoken | u32t4o3tb3gg43\n_gat      | 1\n(3 rows)\n</code></pre>"},{"location":"omni_web/intro/","title":"Intro","text":"<p>omni_web is a library of functions to be used for dealing with the web stack. It's often used together with omni_httpd.</p>"},{"location":"omni_web/query_strings/","title":"Query Strings","text":""},{"location":"omni_web/query_strings/#parsing-query-strings","title":"Parsing query strings","text":"<p><code>parse_query_string</code> takes a query string:</p> <pre><code>select omni_web.parse_query_string('key=value')\n</code></pre> <p>And returns an array of keys and values:</p> <pre><code> parse_query_string --------------------\n{key,value}\n(1 row)\n</code></pre> <p>To retrieve individual parameters, you can use <code>omni_web.param_get</code> and <code>omni_web.param_get_all</code>:</p> <pre><code>select omni_web.param_get(omni_web.parse_query_string('a=1&amp;a=2'), 'a');\nparam_get -----------\n1\n(1 row)\nselect omni_web.param_get_all(omni_web.parse_query_string('a=1&amp;a=2'), 'a');\nparam_get_all\n-----------\n1\n2\n(1 row)\n</code></pre>"},{"location":"omni_xml/overview/","title":"Overview","text":"<p><code>omni_xml</code> extension is an XML toolkit that provides barebones  XML-related functionality. It is particularly useful when Postgres is built without XML support or <code>xml2</code> extension.</p> <p>Since Omnigres users may be using different builds of Postgres, we can't rely on the availability of XML support. This extension closes the gap.</p> <p>It is not fully W3C-compliant</p> <p>The underlying library providing XML/XPath functionality is not fully W3C-conformant.</p> <p>In particular, support for the <code>namespace::</code> axis is unavailable.</p>"},{"location":"omni_xml/usage/","title":"Usage","text":""},{"location":"omni_xml/usage/#xpath-querying","title":"XPath querying","text":"<p>One can query an XML document using XPath 1.0 queries using <code>omni_xml.xpath</code> function. The function takes an XML document as <code>text</code> and an XPath query as  <code>text</code>.</p> <p>It returns a table with <code>path</code> (path to the node) and <code>value</code> (node value).</p>"},{"location":"omni_xml/usage/#element","title":"Element","text":"<p>When searching for elements, it will return entire nodes serialized as XML.</p> <pre><code>select * from omni_xml.xpath('&lt;node&gt;value&lt;/node&gt;', '/node')\n</code></pre> <p>Results in:</p> <pre><code> path  |       value        \n-------+--------------------\n /node | &lt;node&gt;value&lt;/node&gt;\n(1 row)\n</code></pre>"},{"location":"omni_xml/usage/#text","title":"Text","text":"<p>When searching for textual data, one can use <code>text()</code> in their queries.</p> <pre><code>select * from omni_xml.xpath('&lt;node&gt;value&lt;/node&gt;', '/node/text()')\n</code></pre> <p>Results in:</p> <pre><code>  path  | value \n--------+-------\n /node/ | value\n(1 row)\n</code></pre>"},{"location":"omni_xml/usage/#namespaces","title":"Namespaces","text":"<p>It is possible to query using an explicit namespace identifier.</p> <pre><code>select * from omni_xml.xpath('&lt;ns:node&gt;value&lt;/ns:node&gt;', '/ns:node')\n</code></pre> <p>Results in:</p> <pre><code>   path   |          value           \n----------+--------------------------\n /ns:node | &lt;ns:node&gt;value&lt;/ns:node&gt;\n</code></pre> <p>Proper namespace support is lacking</p> <p>This is not ideal if the identifier used is unknown ahead of time, but sufficient if used for API response handling when it is typically the same.</p>"},{"location":"pg_yregress/_install/","title":"Installation","text":"<p><code>pg_yregess</code> is currently developed as part of Omnigres but can be easily built independently of Omnigres (\"out of tree\").</p> <pre><code>git clone https://github.com/omnigres/omnigres\ncd omnigres/pg_yregress\ncmake -B build &amp;&amp; cmake --build build --parallel\n# If you want to install it, too:\nsudo cmake --install build\n</code></pre>"},{"location":"pg_yregress/install/","title":"Installing pg_yregress","text":""},{"location":"pg_yregress/install/#installation","title":"Installation","text":"<p><code>pg_yregess</code> is currently developed as part of Omnigres but can be easily built independently of Omnigres (\"out of tree\").</p> <pre><code>git clone https://github.com/omnigres/omnigres\ncd omnigres/pg_yregress\ncmake -B build &amp;&amp; cmake --build build --parallel\n# If you want to install it, too:\nsudo cmake --install build\n</code></pre>"},{"location":"pg_yregress/intro/","title":"Intro to pg_yregress","text":"<p><code>pg_yregress</code> is a regression testing tool for Postgres.</p> <p>This tool takes original inspiration from <code>pg_regress</code> but addresses some of the issues it has, such as:</p> <ul> <li>Unstructured tests 1</li> <li>Single Postgres instance operation 2</li> <li>Lack of query/test re-use</li> <li>Binary encoding testing</li> <li>Per-query timeouts</li> </ul> <p><code>pg_yregress</code> core idea is to express test cases and setups using YAML files for structuring and comparison. YAML sometimes carries some bad reputation due to being overused in places where it doesn't fit well, as well as somewhat surprising implicit tag resolution scheme results. </p> <p>However, the authors believe that YAML is actually a pretty good fit for the use of grouping queries and expected results. Some features, like anchors and references, are very helpful in succinct representation of tests.</p> <p>pg_yregress is in its early days</p> <p>Not all intended functionality has been implemented, and the one that has been, may suffer from critical bugs. The user experience is rather crude at the moment.</p> <p>None of this is impossible to overcome. Please consider contributing.</p> <ol> <li> <p><code>pg_regress</code> relies on plain text <code>psql</code> session capture and its comparison with the \"baseline\"\u00a0\u21a9</p> </li> <li> <p>This prevents us from testing more complicated scenarios such as replication or database links.\u00a0\u21a9</p> </li> </ol>"},{"location":"pg_yregress/usage/","title":"Usage of pg_yregress","text":"<p>Despite being inspired by <code>pg_regress</code>, <code>pg_yregress</code> is not in any way compatible with <code>pg_regress</code> as it has a different workflow and an execution model.</p>"},{"location":"pg_yregress/usage/#installation","title":"Installation","text":"<p><code>pg_yregess</code> is currently developed as part of Omnigres but can be easily built independently of Omnigres (\"out of tree\").</p> <pre><code>git clone https://github.com/omnigres/omnigres\ncd omnigres/pg_yregress\ncmake -B build &amp;&amp; cmake --build build --parallel\n# If you want to install it, too:\nsudo cmake --install build\n</code></pre>"},{"location":"pg_yregress/usage/#basic-workflow","title":"Basic workflow","text":"<p>This tool uses YAML to describe tests. Let's start with <code>test.yml</code>:</p> <pre><code>tests:\n- name: simple\nquery: select 1 as value\n</code></pre> <p>The above specification will test the <code>select 1...</code> query be executing it and ensuring it was successful. The test will be executed against a managed instance1 of Postgres.</p> <p>Running <code>pg_yregress</code> against this file will produce output adhering to TAP, Test Anything Protocol for human or machine consumption.</p> <pre><code>$ pg_yregress test.yml\nTAP version 14\n1..3\n# Initializing instances\nok 1 - initialize instance `default`\n# Done initializing instances\nok 2 - simple\n</code></pre> <p>As the tool will evolve, we might add other ways to get this information.</p> The above test can be further simplified <p>There's a reduced syntax for checking whether query is successful without naming it. You can even drop the <code>query</code> key and simply write the query as a test:</p> <pre><code>- select 1 as value\n</code></pre> <p>Nothing very interesting. Now, let's amend this test to test the result of this query. For a moment, let's assume we don't know what results are to be returned.</p> <pre><code>tests:\n- name: simple\nquery: select 1 as value\nresults: [ ] # (1)\n</code></pre> <ol> <li>Here we specify an empty result set</li> </ol> <p>Re-running the tool will output something different:</p> <pre><code>$ pg_yregress test.yaml\n...\ntests:\n- name: simple\n  query: select 1 as value\n  results:\n  - value: 1\n</code></pre> <p>As you can see, it shows what test specification should contain in order to pass. You can also observe, that <code>pg_yregress</code> exited with a non-zero error code.</p> <p>For better visibility into changes, YAML-specific diff tools can be of use, such as dyff. To make it easier to use these tools, <code>pg_yregress</code> takes an additional optional argument where it will output the updated specification instead of stdout.</p> <p>Copying <code>results</code> to the original specification will make <code>pg_yregress</code> return zero again (thus, signal that the specification is executed as expected.)</p> <p>Tip</p> <p>Every <code>query</code> item is executed within an individual transaction that is rolled back at the end to ensure it does not interfere with other items.</p>"},{"location":"pg_yregress/usage/#handling-json-and-jsonb","title":"Handling JSON and JSONB","text":"<p><code>pg_yregress</code> supports JSON types.</p> <ul> <li>If a supplied query parameter is a mapping or a sequence, it will be automatically converted to JSON strings</li> <li>If result value is of a JSON type, it will be converted to YAML value.</li> </ul> <pre><code>- name: json and jsonb params\nquery: select $1::json as json, $2::jsonb as jsonb\nparams:\n- hello: 1\n- hello: 2\nresults:\n- json:\nhello: 1\njsonb:\nhello: 2\n- name: json and jsonb results\nquery: select json_build_object('hello', 1), jsonb_build_object('hello', 2)\nresults:\n- json_build_object:\nhello: 1\njsonb_build_object:\nhello: 2\n</code></pre>"},{"location":"pg_yregress/usage/#testing-for-failures","title":"Testing for failures","text":"<p>You can simply test that a certain query will fail:</p> <pre><code>tests:\n- name: error\nquery: selec 1 as value\nerror: true\n</code></pre> <p>The above will succeed, since we have set <code>error</code> to <code>true</code>.</p> <p>But how we can test against specific error message? This can be done by setting <code>error</code> to a more specific value:</p> <pre><code>tests:\n- name: error\nquery: selec 1 as value\nerror:\nseverity: ERROR\nmessage: syntax error at or near \"selec\"\n</code></pre> <p>The above will pass as this is the error this test fails with.</p> <p>Multiple forms of <code>error</code> report are supported:</p>"},{"location":"pg_yregress/usage/#error-message","title":"Error message","text":"<pre><code>error: syntax error at or near \"selec\"\n</code></pre> <p>When passed as a scalar value, error message will be compared with the provided one.</p>"},{"location":"pg_yregress/usage/#full-error-form","title":"Full error form","text":"<pre><code>error:\nseverity: ERROR\nmessage: &lt;error message&gt;\n# Optional\ndetail: &lt;error details&gt;\n</code></pre> <p>In this form, both severity and message can be specified.</p>"},{"location":"pg_yregress/usage/#negative-tests","title":"Negative tests","text":"<p>A test can be marked negative when it should fail if the test itself passes. This is useful when testing scenarios where something specific should not happen.</p> <pre><code>- name: 'string' should not be returned\nquery: select my_fun() as result\nresults:\n- result: string\nnegative: true\n</code></pre> <p>The example is slightly contrived as we can test the assumption in the query itself, but at times it is easier or clearer to have this specified as such \"negative test\".</p>"},{"location":"pg_yregress/usage/#multi-step-tests","title":"Multi-step tests","text":"<p>Some test inolve more than one query and we need to check for more than just the final result, so simply executing all statements and queries delimited by a semicolon wouldn't be great.</p> <p>For this use-case, instead of using <code>query</code>, use <code>steps</code>:</p> <pre><code>tests:\n- name: Test\nsteps:\n- query: create table tab as (select generate_series(1,3) as i)\n- query: select * from tab\nresults:\n- i: 1\n- i: 2\n- i: 3\n</code></pre> <p>Tip</p> <p>The entire <code>steps</code> item is executed within an individual transaction and is rolled  back at the end to ensure it does not interfere with other items. Within <code>steps</code>, every item is not wrapped into a transaction and the results of each step are visible  in the next step.</p>"},{"location":"pg_yregress/usage/#grouping-tests","title":"Grouping tests","text":"<p>There are cases when a number of tests that don't need to be executed in the same transaction (like multi-step) but they do form a logical group nevertheless. For example, testing different aspects of a feature, or different inputs on the same function.</p> <p>For this, one can use <code>tests</code>:</p> <pre><code>tests:\n- name: fib\ntests:\n- query: select fib(0)\nresults:\n- fib: 0\n- query: select fib(1)\nresults:\n- fib: 1\n- query: select fib(2)\nresults:\n- fib: 1\n- query: select fib(3)\nresults:\n- fib: 2\n</code></pre>"},{"location":"pg_yregress/usage/#committing-tests","title":"Committing tests","text":"<p>By default, all tests are rolled back to ensure clean environment. However, in some cases, tests need to commit (for example, to test deferred constraints).</p> <p>When this is necessary, the <code>commit</code> property of a test should be set to <code>false</code>:</p> <pre><code>- query: insert into table values (...)\ncommit: true\n</code></pre> <p>This can be also used for multi-step tests. If any of the steps is committed but the multi-step test itself isn't, it'll roll back the uncommitted steps.</p>"},{"location":"pg_yregress/usage/#notices","title":"Notices","text":"<p>One can also check their tests for notices:</p> <pre><code>tests:\n- name: notices\nquery: |\ndo $$\nbegin\nraise notice 'test 1';\nraise notice 'test 2';\nend;\n$$ language plpgsql\nnotices:\n- test 1\n- test 2\n</code></pre> <p>One can also check a <code>steps</code>-based test the accumulated sequence of notices (although testing individually in <code>query</code> steps is still possible):</p> <pre><code>tests:\n- name: multi-step notices (individual)\nsteps:\n- query: |\ndo $$\nbegin\nraise notice 'test 1';\nend;\n$$ language plpgsql\nnotices:\n- test 1\n- query: |\ndo $$\nbegin\nraise notice 'test 2';\nend;\n$$ language plpgsql\nnotices:\n- test 2\n</code></pre>"},{"location":"pg_yregress/usage/#binary-format","title":"Binary format","text":"<p>Sometimes there's a need to test binary encoding of types2. <code>pg_yregress</code> allows this to be done by manipulating the <code>binary</code> property of the <code>query</code> test.</p> Value Description <code>true</code> Both <code>params</code> and <code>results</code> are binary <code>params</code> <code>params</code> are binary <code>results</code> <code>results</code> are binary <p>Binary encodings are done using hexadecimal notiation prefixed by <code>0x</code>.</p> <p>This will return results as binary:</p> <pre><code>tests:\n- name: binary format\nquery: select true as value\nbinary: true\nresults:\n- value: 0x01\n</code></pre> <p>And this will return results as characters but take parameters as binary:</p> <pre><code>tests:\n- name: binary format for params\nquery: select $1::bool as value\nbinary: params\nparams:\n- 0x01\nresults:\n- value: true\n</code></pre>"},{"location":"pg_yregress/usage/#skipping-tests","title":"Skipping tests","text":"<p>If a test not meant to be executed, one can use <code>skip</code> directive to suppress its execution. Given a boolean scalar, if it is positive, the test will be skipped. If a negative boolean scalar will be given, it will not be skipped. If any other scalar will be given, it will be used as a reason for skipping the test.</p> <pre><code>tests:\n- name: skip this\nskip: true\n- name: skip this for a reason\nskip: reason\n</code></pre> <p>Skipped tests don't need to have a valid instruction (<code>query</code> or <code>steps</code>).</p> <p>If a skipped test is meant to be executed but shouldn't fail the execution of test suite in case if it fails, <code>todo</code> directive can be used instead of <code>skip</code>.</p> <pre><code>tests:\n- name: WIP\ntodo: true\nquery: select\n</code></pre>"},{"location":"pg_yregress/usage/#configuring-instances","title":"Configuring instances","text":"<p>Tests may have one more instances they run on. By default, <code>pg_yregress</code> will provision one. However, if you want to configure the instance or add more than one, you can use <code>instances</code> configuration which is a mapping of names to the configuration dictionaries:</p> <pre><code>instances:\nconfigured:\n# Can be configured with a mapping\nconfig:\nlog_connections: yes\nconfigured_1:\n# Can be configured with a string using `postgresql.conf` format\nconfig: |\nlog_connections = yes\ndefault:\ninit:\n# Executes a sequence of queries\n- create extension my_extension\n# One instance may be specified as default \ndefault: yes\nother:\ninit:\n- alter system set config_param = '...'\n# Initialization may require restarting the instance\n- restart: true\n</code></pre> <p>Each test will run on a default instance, unless <code>instance</code> property is specified and the name of the instance is referenced.</p> <p>You can also configure an instance with a custom <code>pg_hba.conf</code> file by using <code>hba</code> key:</p> <pre><code>instances:\nconfigured:\nhba: |\nlocal all all trust\nhost all all all trust\n</code></pre> <p>This is useful when tests impose special authentication requirements.</p>"},{"location":"pg_yregress/usage/#single-instance-configuration","title":"Single instance configuration","text":"<p>In case when only one instance is necessary but it needs to be configured, instead of using <code>instances</code> and naming the default instance, one can use <code>instance</code> key instead:</p> <pre><code>instance:\ninit:\n- create extension ltree\n</code></pre>"},{"location":"pg_yregress/usage/#unmanaged-instances","title":"Unmanaged instances","text":"<p>By default, <code>pg_yregress</code> manages Postgres instances itself: provisions the database and its configuration, starts and stops processes. However, it can also be used to run tests against other instances of Postgres operated outside of its own workflow. This can be used for testing functionality or data patterns in an existing database.</p> <p>In order to use it, one has to pass one of the following options:</p> Option Short Description --host -h Host to connect to. Defaults to <code>127.0.0.1</code> if other options are selected. --port -p Port to connect to. Default to <code>5432</code> if not specified. --username -U Username. Defaults to current username. --dbname -d Database name. Defaults to username. --password -W Force to prompt for a password before connecting to the database. --no-password -w Never issue a password prompt. Will attempt to get a password from <code>PGPASSWORD</code> environment variable. <p>For example, this will attempt to connect to a local Postgres instance on port 5432 using <code>omnigres</code> as a database name and a username, prompting for a password:</p> <pre><code>pg_yregress -U omnigres -W tests.yml\n</code></pre> <p>Caveats</p> <p>The following options are not available for unmanaged instances and will make pg_yregress terminate early with a corresponding error message.</p> <ul> <li><code>instance</code> and <code>instances</code> configuration keys</li> <li><code>restart</code> tests</li> </ul>"},{"location":"pg_yregress/usage/#configuring-test-suite","title":"Configuring test suite","text":"<p>In certain cases, it may be useful to pass some configuration information to the test suite itself. While it is generally recommended to avoid this, sometimes it's right answer.</p> <p>All test suites receive an implicit <code>env</code> mapping at the root that contains a mapping of all environment variables. Using YAML Path (YPath) notation, one can retrieve configuration specified through environment variables:</p> <pre><code>- name: env\nquery: select $1::text as user\nparams:\n- */env/USER\nresults:\n- user: */env/USER\n</code></pre> <ol> <li> <p>Postgres instance that is provisioned and deprovisioned by <code>pg_yregress</code> tool without any user involvement.\u00a0\u21a9</p> </li> <li> <p>The encoding that is used by <code>SEND</code> and <code>RECEIVE</code> functions of the type.\u00a0\u21a9</p> </li> </ol>"}]}